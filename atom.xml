<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Oak-limy.github.io</id>
    <title>Oak_limy 的 博客</title>
    <updated>2020-06-26T18:05:44.029Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Oak-limy.github.io"/>
    <link rel="self" href="https://Oak-limy.github.io/atom.xml"/>
    <subtitle>音无结弦之时，悦动天使之心。立于浮华之世，奏响天籁之音。</subtitle>
    <logo>https://Oak-limy.github.io/images/avatar.png</logo>
    <icon>https://Oak-limy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Oak_limy 的 博客</rights>
    <entry>
        <title type="html"><![CDATA[小学二年级也能听懂的数位dp基础（]]></title>
        <id>https://Oak-limy.github.io/post/xiao-xue-er-nian-ji-ye-neng-ting-dong-de-shu-wei-dp-ji-chu/</id>
        <link href="https://Oak-limy.github.io/post/xiao-xue-er-nian-ji-ye-neng-ting-dong-de-shu-wei-dp-ji-chu/">
        </link>
        <updated>2020-06-26T17:39:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="数位dp是什么">数位dp是什么</h2>
<p><s>字面意思</s><br>
数位dp往往都是一样的题型，给定一个闭区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>，让你求这个区间中满足某种条件的数的总数<br>
<s>感觉很有套路</s></p>
<h2 id="例题">例题</h2>
<p><a href="https://www.luogu.com.cn/problem/P2657">P2657 [SCOI2009] windy 数</a><br>
<strong>做法：</strong><br>
这大概是数位dp模板题或者入门题，这种题还是挺套路的<br>
我们设dp[i][j]为长度i中最高位是j的windy数的个数<br>
dp[i][j]=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mn>9</mn></msubsup><mo>[</mo><mi>a</mi><mi>b</mi><mi>s</mi><mo>(</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo>)</mo><mo>&gt;</mo><mo>=</mo><mn>2</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{k=0}^{9}[abs(j-k)&gt;=2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.503226em;vertical-align:-1.002113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5011130000000001em;"><span style="top:-2.097887em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.000005em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.950005em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.002113em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span><br>
每一步的转移都是前一位的和转移过来的<br>
先初始化所有的dp[i][j]<br>
接着算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[a,b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">]</span></span></span></span>区间的所有windy数</p>
<pre><code class="language-cpp">#define MAXN 20
int a[MAXN],dp[MAXN][MAXN],n,m;
void init(){ //初始化
	for(int i=0;i&lt;=9;i++)dp[1][i]=1; //要注意0,1,2,3,4...9都属于windy数 
	for(int i=2;i&lt;=10;i++){   //枚举从第二位开始的每一位
		for(int j=0;j&lt;=9;j++){     //第i位上的数
			for(int k=0;k&lt;=9;k++){ //从上一位的数转移过来
				if(fabs(j-k)&gt;=2)dp[i][j]+=dp[i-1][k]; //状态转移
			}
		}
	}
}
int work(int x){  //开始计算
	int len=0;
	ll ans=0;
	memset(a,0,sizeof(a));
	while(x&gt;0){
		a[++len]=x%10;
		x/=10;
	} //算位数，用a数组存每一位，要注意这样存的是倒着存的，len位是最高位
	// 1. 位数小于len，则无需考虑与x的大小关系
	for(int i=1;i&lt;len;i++){  //1~len-1位
		for(int j=1;j&lt;=9;j++){ //最高位只能取1~9
			ans+=dp[i][j];
		}
	}
	// 2.len位，最高位小于原数最高位，也不用考虑与x的大小关系
	for(int i=1;i&lt;a[len];i++){
		ans+=dp[len][i];
	}
	// 3. len位，最高位等于原数最高位，较为复杂，需要考虑与x的大小关系
	for(int i=len-1;i&gt;=1;i--){ //处理 1~len-1位
		for(int j=0;j&lt;=a[i]-1;j++){ //第i位为j
			if(abs(j-a[i+1])&gt;=2)ans+=dp[i][j]; //计算
		}
		if(abs(a[i+1]-a[i])&lt;2)break; //小于2直接跳过
	}
	return ans;
}
int main(){
	cin&gt;&gt;n&gt;&gt;m;
	init();
	cout&lt;&lt;work(m+1)-work(n)&lt;&lt;endl;
    /*这里有的人会说为什么不是work(m)-work(n-1)
       那是因为每次算work如果自己是windy数，但不会带上自己
       所以需要计算work(x+1)，work(m+1)-work(n-1+1)，小细节需要注意一下
       如果写work(m)-work(n-1)只能得90分
                                                                          */
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round 636 (Div. 3) F题 题解]]></title>
        <id>https://Oak-limy.github.io/post/codeforces-round-636-div-3-f-ti-ti-jie/</id>
        <link href="https://Oak-limy.github.io/post/codeforces-round-636-div-3-f-ti-ti-jie/">
        </link>
        <updated>2020-05-03T18:02:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题意">题意</h2>
<p>给你一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的排列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，但你不知道这个排列具体长什么样，再给出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个子排列，每个排列的元素为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>l</mi></msub><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>r</mi></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">[a_l,a_l+1,\dots,a_r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 代表从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的数字，这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个排列中每个数必将出现一次，现在让你倒推回去，输出一种可能方案的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>。<strong>题目保证肯定有一种可行方案。</strong></p>
<p>首先要了解几个重要的性质：</p>
<ul>
<li>如果一个数出现在所有子排列中出现两次及以上，则这个数肯定不是原排列里的最后一个数</li>
<li>如果有一个数出现次数只有一次，则它可能是最后一个也可能是第一个数</li>
</ul>
<p>知道这么多差不多就可以做这道题了（在这个解法中好像没怎么体现出</p>
<h2 id="思路">思路</h2>
<p>我们考虑从前往后构造原排列<br>
如果知道了第一位的数，那么就可以通过枚举求出第二位置的，以此类推。</p>
<pre><code class="language-cpp">const ll MAXN=210;
ll t,n;
ll a[MAXN][MAXN],pos[MAXN],ans[MAXN];
bool ok(){
	for(int now=2;now&lt;=n;now++){//从第二位开始枚举
		for(int i=1;i&lt;n;i++){//枚举子排序
			ll r=a[i][0],x=-1;//r为当前子排序的k
			for(int k=1;k&lt;=a[i][0];k++){
				ll b=a[i][k];//当前子排序的数
				if(!pos[b])x=b;
				else if(pos[b]&gt;=now-a[i][0]+1)r--;//要在当前子排序中
			}
			if(r==1&amp;&amp;x!=-1){//r-1个数都用掉了
				ans[now]=x;
				pos[x]=now;
				break;
			}
		}
		if(ans[now]==0)return false;
	}
	return true;
}
int main(){
	cin&gt;&gt;t;
	while(t--){
		cin&gt;&gt;n;
		for(int i=1;i&lt;n;i++){
			cin&gt;&gt;a[i][0];//输进来的k
			for(int j=1;j&lt;=a[i][0];j++)cin&gt;&gt;a[i][j];
		}
		for(int i=1;i&lt;=n;i++){//第一位1~n枚举
			for(int j=1;j&lt;=n;j++){
				pos[j]=0;ans[j]=0;//初始化
			}
			ans[1]=i;//枚举的第一位，所以第一位设i
			pos[i]=1;//i的位置为1
			if(ok())break;//可行方案
		}
		for(int i=1;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;' ';
		cout&lt;&lt;endl;
	}
}
</code></pre>
<p>参考：</p>
<p><a href="https://blog.csdn.net/mrcrack/article/details/105708055">1</a></p>
<p><a href="https://blog.csdn.net/qq_42937891/article/details/105716624">2</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round 634 (Div. 3) F题 题解]]></title>
        <id>https://Oak-limy.github.io/post/CF1335F/</id>
        <link href="https://Oak-limy.github.io/post/CF1335F/">
        </link>
        <updated>2020-05-02T16:10:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="题意">题意</h3>
<p>给你一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的矩阵，每个格子上有颜色，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 代表黑，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 代表白。每个格子上还有方向，在这个格子上的机器人会向格子方向的方向走，并且题目保证机器人不会走出矩阵。</p>
<p>你需要完成以下几个任务：</p>
<ul>
<li>在格子上摆放尽可能多的机器人，他们同时开始<strong>无尽</strong>地运动，并且任何时刻都不能有两个机器人在同一个格子</li>
<li>首先最大化机器人的个数，如果有多种方案机器人个数相等，再最大化初始时摆在黑格内的机器人</li>
</ul>
<p>首先，题目中提到的无尽，则代表每个机器人走的路线都是循环的。</p>
<p>对于每个机器人，它走的路径最长也就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>。我们考虑在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n * m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 步内机器人的相遇情况</p>
<p>如果有两个机器人在不在同一个循环里，毫不相干。则它们肯定不会相遇</p>
<p>如果有两个机器人在同一个循环里，并且在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的步数里没有相遇，则他们也会以这样的节奏继续走下去，也不会相遇；反之如果相遇了的话，他们会在同样的格子里一直走下去。</p>
<p>所以我们想判断两个机器人是否会相遇，只需要看在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的步数里两个机器人是否在一起就行了</p>
<p>我们用一维 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">color</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 数组表示每个位置的颜色，用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>i</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">white</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>l</mi><mi>a</mi><mi>c</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">black</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 数组表示机器人的初始位置的颜色</p>
<p>对于走 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> ，我们可以使用倍增，最后统计答案。</p>
<pre><code class="language-cpp">const ll MAXN=1e6+10;
ll a[MAXN],color[MAXN],black[MAXN],white[MAXN],mult[21][MAXN];
ll t,n,m;
char ch[MAXN];
int main(){
	cin&gt;&gt;t;
	while(t--){
		cin&gt;&gt;n&gt;&gt;m;
		for(int i=1;i&lt;=n;i++){
			cin&gt;&gt;ch+1;
			for(int j=1;j&lt;=m;j++){
				if(ch[j]=='0')color[(i-1)*m+j]=0;//黑色
				else color[(i-1)*m+j]=1;//白色
			}
		}
		for(int i=1;i&lt;=n;i++){
			cin&gt;&gt;(ch+1);
			for(int j=1;j&lt;=m;j++){
				ll pos=(i-1)*m+j; //在数组上的位置
				if(ch[j]=='U')mult[0][pos]=pos-m;//上
				if(ch[j]=='D')mult[0][pos]=pos+m;//下
				if(ch[j]=='L')mult[0][pos]=pos-1;//左
				if(ch[j]=='R')mult[0][pos]=pos+1;//右
			}
		}
		ll matrix=n*m;//最大路径
		for(int i=1;i&lt;=20;i++){
			for(int j=1;j&lt;=matrix;j++){
				mult[i][j]=mult[i-1][mult[i-1][j]];//倍增
			}
		}
		for(int j=1;j&lt;=matrix;j++){
			ll pos=j;
			for(int i=20;i;i--){
				if((1&lt;&lt;i)&amp;matrix)pos=mult[i][pos];
			}
			if(color[j])white[pos]=1;//是白
			else black[pos]=1;//是黑
		}
		ll res=0,bla=0;
		for(int i=1;i&lt;=matrix;i++){
			if(black[i]){
				res++;
				bla++;//是黑色的++
				black[i]=0;
				white[i]=0;
			}
			else if(white[i]){
				res++;
				black[i]=0;
				white[i]=0;
			}
		}
		cout&lt;&lt;res&lt;&lt;' '&lt;&lt;bla&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<p>第一次在自己博客里发题解，感觉就是给菜鸡一样的自己看的，以后会继续尝试div3f题的qaq/kk</p>
<p>还是希望大佬能支持/kel</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[任务计划]]></title>
        <id>https://Oak-limy.github.io/post/ren-wu-ji-hua/</id>
        <link href="https://Oak-limy.github.io/post/ren-wu-ji-hua/">
        </link>
        <updated>2020-03-30T14:54:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong>训练计划：</strong></p>
<ul>
<li><a href="https://atcoder.jp/contests/dp">Atcoder dp contest</a><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span>(<a href="https://blog.csdn.net/hqg_ac/article/details/85984085">题解</a>)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span>(7 / 26)</li>
<li><a href="https://www.luogu.com.cn/training/4986">Div. 3难度图论树论题练手(自制题单)</a><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span>(3 / ∞)</li>
<li>补之前打过的CF的题</li>
<li><a href="https://www.luogu.com.cn/problem/list?tag=83">补刷历年 NOIP-TG 的题</a></li>
<li>CF Div2 D &amp; E题</li>
</ul>
<p><strong>算法学习：</strong></p>
<ul>
<li>**各种dp（（（    **
<ul>
<li>数位dp</li>
<li>期望dp</li>
<li>树形dp</li>
<li>概率dp</li>
<li>斜率优化dp</li>
</ul>
</li>
<li>网络流</li>
<li>字符串(SA &amp; SAM &amp; KMP)</li>
<li>FFT &amp; NTT</li>
<li>数学</li>
<li>毒瘤数据结构(平衡树 &amp; 主席树 &amp; splay &amp; Treap)</li>
<li>树链剖分</li>
<li>图论()</li>
</ul>
<p><strong>算法复习：</strong></p>
<ul>
<li>线段树</li>
<li>模拟（</li>
</ul>
<p><strong>学习中：</strong></p>
<ul>
<li>dp</li>
<li>树链剖分</li>
<li>数据结构</li>
</ul>
<p><strong>老师教的好，同学学的会👍：</strong></p>
<ul>
<li>博 弈 论</li>
</ul>
<h2 id="做题计划">做题计划：</h2>
<ul>
<li><a href="https://www.luogu.com.cn/training/1435">【动态规划】普及~省选的dp题</a><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> (12 / 50)</li>
<li><a href="https://www.luogu.com.cn/training/1055">莫比乌斯反演（函数）练习题单</a><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span>(2 / 17)</li>
<li><a href="https://www.luogu.com.cn/training/1574">codeforces 2200左右的DS题</a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span>(0/50)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[个人常用模板]]></title>
        <id>https://Oak-limy.github.io/post/ge-ren-chang-yong-mo-ban/</id>
        <link href="https://Oak-limy.github.io/post/ge-ren-chang-yong-mo-ban/">
        </link>
        <updated>2020-03-29T15:08:02.000Z</updated>
        <content type="html"><![CDATA[<p>**常规模板 **</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define endl '\n'
#define fast ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define zy -2147382637
#define bql 2147483647
#define ll long long
#define ull unsigned long long
#define ld long double
#define il inline
#define sz(x) x.size()
#define maxn 100010
#define rp(i, l, r) for (int i = l; i &lt;= r; i++)
#define rb(i, r, l) for (int i = r; i &gt;= l; i--)
#define fi first
#define se second
#define pb push_back
#define mp make_pair

using namespace std;
ll max(ll a,ll b){if(a&gt;b)return a;else return b;}
ll min(ll a,ll b){if(a&lt;b)return a;else return b;}
ll lowbit(ll x){return x&amp;(-x);}
ll prime(ll x){
   if(x&lt;=1)return false;
   for(int i=2;i&lt;=int(sqrt(x));i++){
	   if(x%i==0)return false;
   }return true;
}bool cmp(ll a,ll b){return a&gt;b;}
ll gcd(ll a,ll b){ll r;while(b&gt;0){r=a%b;a=b;b=r;}return a;}
ll powmod(ll a,ll b,ll mod) {ll res=1;a%=mod; assert(b&gt;=0); for(;b;b&gt;&gt;=1){if(b&amp;1)res=res*a%mod;a=a*a%mod;}return res;}
inline int readint() {
	char c = getchar(); int w = 1; int x = 0;
	while (!isdigit(c))
		(c == '-') &amp;&amp; (w = -w), c = getchar();
	while (isdigit(c))
		x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ '0'), c = getchar();
	x *= w;
	return x;
}
inline ll readll() {
	char c = getchar(); ll w = 1; ll x = 0;
	while (!isdigit(c))
		(c == '-') &amp;&amp; (w = -w), c = getchar();
	while (isdigit(c))
		x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ '0'), c = getchar();
	x *= w;
	return x;
}
void fl(string name){
	freopen((name+&quot;.in&quot;).c_str(),&quot;r&quot;,stdin);
	freopen((name+&quot;.out&quot;).c_str(),&quot;w&quot;,stdout);
}
const int dx[8] = {-1, 1, 0, 0, -1, 1, -1, 1},
		  dy[8] = {0, 0, -1, 1, -1, -1, 1, 1};
int main(){
	
}
/* stuff to remember
	* int overflow, array bounds
	* special cases (n=1? n=0?)
	* do something instead of nothing and stay organized
	* USE STATIC ARRAYS
	* DEFINING ARRAYS BEFORE main()
	* DO NOT DEFINE ARRAYS IN main()
	* USE INT INSTEAD OF LL,NOTICE THE MLE
*/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的个人博客开始施工了！！！]]></title>
        <id>https://Oak-limy.github.io/post/wo-de-ge-ren-you-xiang-kai-shi-shi-gong-liao/</id>
        <link href="https://Oak-limy.github.io/post/wo-de-ge-ren-you-xiang-kai-shi-shi-gong-liao/">
        </link>
        <updated>2020-03-29T13:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>尽管知道就算搞出来了也没人看/kk<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">emm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">m</span></span></span></span><br>
尽管很弱，但是基本的东西总是要有的（</p>
]]></content>
    </entry>
</feed>